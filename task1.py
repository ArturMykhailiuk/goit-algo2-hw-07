import random
import time
import pandas as pd
from functools import lru_cache

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
N = 1000000  # –†–æ–∑–º—ñ—Ä –º–∞—Å–∏–≤—É
Q = 5000  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤
array = [random.randint(1, 100) for _ in range(N)]  # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –º–∞—Å–∏–≤—É

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—ñ–≤ (50% - —Å—É–º–∞ –≤—ñ–¥—Ä—ñ–∑–∫—É, 50% - –æ–Ω–æ–≤–ª–µ–Ω–Ω—è)
queries = [
    (
        ("Range", L := random.randint(0, N - 1), random.randint(L, N - 1))
        if random.random() < 0.5
        else ("Update", random.randint(0, N - 1), random.randint(1, 100))
    )
    for _ in range(Q)
]


### üîπ 1. –ë–µ–∑ –∫–µ—à—É–≤–∞–Ω–Ω—è
def range_sum_no_cache(L, R):
    return sum(array[L : R + 1])


def update_no_cache(index, value):
    array[index] = value


start_time = time.time()
for query in queries:
    if query[0] == "Range":
        range_sum_no_cache(query[1], query[2])
    elif query[0] == "Update":
        update_no_cache(query[1], query[2])
no_cache_time = time.time() - start_time


### üîπ 2. –ó –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º –∫–µ—à–µ–º (LRU Cache)
# –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
# –î–ª—è –∫–æ–∂–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ–≤, –Ω–∞ —è–∫—ñ –≤—ñ–Ω –≤–ø–ª–∏–≤–∞—î
index_to_ranges = {i: set() for i in range(N)}


@lru_cache(maxsize=10000)
def range_sum_with_optimized_cache(L, R):
    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å: –∫–æ–∂–µ–Ω —ñ–Ω–¥–µ–∫—Å —É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ [L, R] –≤–ø–ª–∏–≤–∞—î –Ω–∞ —Ü–µ–π –∫–µ—à
    for i in range(L, R + 1):
        index_to_ranges[i].add((L, R))
    return sum(array[L : R + 1])


def update_with_optimized_cache(index, value):
    array[index] = value
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ –¥—ñ–∞–ø–∞–∑–æ–Ω–∏, –Ω–∞ —è–∫—ñ –≤–ø–ª–∏–≤–∞—î —Ü–µ–π —ñ–Ω–¥–µ–∫—Å
    affected_ranges = index_to_ranges[index].copy()
    # –û—á–∏—â–∞—î–º–æ –∫–µ—à —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ü–∏—Ö –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ–≤
    for L, R in affected_ranges:
        range_sum_with_optimized_cache.cache_clear()  # –¢—É—Ç –∫—Ä–∞—â–µ –±—É–ª–æ –± –æ—á–∏—Å—Ç–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á, –∞–ª–µ lru_cache –Ω–µ –º–∞—î —Ç–∞–∫–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
        # –í–∏–¥–∞–ª—è—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω –∑ —É—Å—ñ—Ö —ñ–Ω–¥–µ–∫—Å—ñ–≤, —è–∫—ñ –≤—ñ–Ω –º—ñ—Å—Ç–∏—Ç—å
        for i in range(L, R + 1):
            index_to_ranges[i].discard((L, R))


start_time = time.time()
for query in queries:
    if query[0] == "Range":
        range_sum_with_optimized_cache(query[1], query[2])
    elif query[0] == "Update":
        update_with_optimized_cache(query[1], query[2])
optimized_cache_time = time.time() - start_time


### üîπ 3. –ó –º–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–º –∫–µ—à–µ–º (–±–µ–∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π)
# –©–µ –æ–¥–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ InvalidationCounter
invalidation_counter = 0


@lru_cache(maxsize=10000)
def range_sum_with_counter_cache(L, R, counter):
    # –Ü–≥–Ω–æ—Ä—É—î–º–æ counter –≤ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è—Ö, –≤—ñ–Ω –ø–æ—Ç—Ä—ñ–±–µ–Ω –ª–∏—à–µ –¥–ª—è —ñ–Ω–≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∫–µ—à—É
    return sum(array[L : R + 1])


def update_with_counter_cache(index, value):
    global invalidation_counter
    array[index] = value
    # –ü—Ä–æ—Å—Ç–æ –∑–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ
    invalidation_counter += 1


start_time = time.time()
for query in queries:
    if query[0] == "Range":
        range_sum_with_counter_cache(query[1], query[2], invalidation_counter)
    elif query[0] == "Update":
        update_with_counter_cache(query[1], query[2])
counter_cache_time = time.time() - start_time


### üîπ 4. Segment Tree (–¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è)
class SegmentTree:
    def __init__(self, array):
        self.n = len(array)
        self.tree = [0] * (4 * self.n)
        self.build(array, 0, 0, self.n - 1)

    def build(self, array, node, start, end):
        if start == end:
            self.tree[node] = array[start]
        else:
            mid = (start + end) // 2
            left_child = 2 * node + 1
            right_child = 2 * node + 2
            self.build(array, left_child, start, mid)
            self.build(array, right_child, mid + 1, end)
            self.tree[node] = self.tree[left_child] + self.tree[right_child]

    def update(self, idx, value, node=0, start=0, end=None):
        if end is None:
            end = self.n - 1
        if start == end:
            self.tree[node] = value
        else:
            mid = (start + end) // 2
            left_child = 2 * node + 1
            right_child = 2 * node + 2
            if idx <= mid:
                self.update(idx, value, left_child, start, mid)
            else:
                self.update(idx, value, right_child, mid + 1, end)
            self.tree[node] = self.tree[left_child] + self.tree[right_child]

    def query(self, L, R, node=0, start=0, end=None):
        if end is None:
            end = self.n - 1
        if R < start or L > end:
            return 0
        if L <= start and end <= R:
            return self.tree[node]
        mid = (start + end) // 2
        left_sum = self.query(L, R, 2 * node + 1, start, mid)
        right_sum = self.query(L, R, 2 * node + 2, mid + 1, end)
        return left_sum + right_sum


segment_tree = SegmentTree(array)

start_time = time.time()
for query in queries:
    if query[0] == "Range":
        segment_tree.query(query[1], query[2])
    elif query[0] == "Update":
        segment_tree.update(query[1], query[2])
segment_tree_time = time.time() - start_time


### üîπ 5. Fenwick Tree (–¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è)
class FenwickTree:
    def __init__(self, n):
        self.n = n
        self.tree = [0] * (n + 1)

    def build(self, array):
        for i in range(1, self.n + 1):
            self.add(i, array[i - 1])

    def add(self, index, value):
        while index <= self.n:
            self.tree[index] += value
            index += index & -index

    def prefix_sum(self, index):
        result = 0
        while index > 0:
            result += self.tree[index]
            index -= index & -index
        return result

    def query(self, L, R):
        return self.prefix_sum(R + 1) - self.prefix_sum(L)

    def update(self, index, value):
        diff = value - (self.query(index, index))
        self.add(index + 1, diff)


fenwick_tree = FenwickTree(N)
fenwick_tree.build(array)

start_time = time.time()
for query in queries:
    if query[0] == "Range":
        fenwick_tree.query(query[1], query[2])
    elif query[0] == "Update":
        fenwick_tree.update(query[1], query[2])
fenwick_tree_time = time.time() - start_time


### üìä **–í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É –≥–∞—Ä–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ**
data = {
    "–ú–µ—Ç–æ–¥": [
        "–ë–µ–∑ –∫–µ—à—É",
        "–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –∫–µ—à",
        "–ö–µ—à –∑ –ª—ñ—á–∏–ª—å–Ω–∏–∫–æ–º",
        "Segment Tree",
        "Fenwick Tree",
    ],
    "–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Å–µ–∫)": [
        no_cache_time,
        optimized_cache_time,
        counter_cache_time,
        segment_tree_time,
        fenwick_tree_time,
    ],
    "–í—ñ–¥–Ω–æ—Å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å": [
        "1.0x",
        f"{no_cache_time/optimized_cache_time:.2f}x",
        f"{no_cache_time/counter_cache_time:.2f}x",
        f"{no_cache_time/segment_tree_time:.2f}x",
        f"{no_cache_time/fenwick_tree_time:.2f}x",
    ],
    "–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è": [
        "O(1)",
        "O(1) + —á–∞—Å—Ç–∫–æ–≤–æ —ñ–Ω–≤–∞–ª—ñ–¥–∞—Ü—ñ—è",
        "O(1)",
        "O(log N)",
        "O(log N)",
    ],
    "–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—É": [
        "O(R - L)",
        "O(1) (–∫–µ—à)",
        "O(1) (–∫–µ—à)",
        "O(log N)",
        "O(log N)",
    ],
}

df = pd.DataFrame(data)

# –í–∏–≤–æ–¥–∏–º–æ –∫—Ä–∞—Å–∏–≤—É —Ç–∞–±–ª–∏—Ü—é –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
print("\n" + "=" * 80)
print(" " * 30 + "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø üìä")
print("=" * 80)
print(f"–†–æ–∑–º—ñ—Ä –º–∞—Å–∏–≤—É: {N:,} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
print(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤: {Q:,} (–ø—Ä–∏–±–ª–∏–∑–Ω–æ {Q//2:,} –∑–∞–ø–∏—Ç—ñ–≤ —Å—É–º–∏ —ñ {Q//2:,} –æ–Ω–æ–≤–ª–µ–Ω—å)")
print("-" * 80)

# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—ñ
table_data = []
fastest_time = min(
    no_cache_time,
    optimized_cache_time,
    counter_cache_time,
    segment_tree_time,
    fenwick_tree_time,
)
for i, method in enumerate(data["–ú–µ—Ç–æ–¥"]):
    time_value = data["–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Å–µ–∫)"][i]
    rel_speed = data["–í—ñ–¥–Ω–æ—Å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å"][i]
    time_str = f"{time_value:.4f} —Å–µ–∫"

    # –î–æ–¥–∞—î–º–æ –ø–æ–∑–Ω–∞—á–∫—É –Ω–∞–π—à–≤–∏–¥—à–æ–≥–æ –º–µ—Ç–æ–¥—É
    if time_value == fastest_time:
        time_str += " üèÜ"

    table_data.append(
        [
            method,
            time_str,
            rel_speed,
            data["–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"][i],
            data["–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—É"][i],
        ]
    )


from tabulate import tabulate

headers = [
    "–ú–µ—Ç–æ–¥",
    "–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è",
    "–ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è",
    "–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è",
    "–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—É",
]
print(tabulate(table_data, headers=headers, tablefmt="fancy_grid"))

print("-" * 80)
